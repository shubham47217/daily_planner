<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Day Planner</title>
  <style>
    :root {
      --bg:#0f172a; /* slate-900 */
      --panel:#111827; /* gray-900 */
      --muted:#94a3b8; /* slate-400 */
      --text:#e5e7eb; /* gray-200 */
      --accent:#22c55e; /* green-500 */
      --danger:#ef4444; /* red-500 */
      --warn:#f59e0b; /* amber-500 */
      --card:#1f2937; /* gray-800 */
      --input:#0b1220; /* dark */
      --border:#334155; /* slate-700 */
    }
    * { box-sizing:border-box }
    body {
      margin:0; background:var(--bg); color:var(--text);
      font: 16px/1.4 system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, "Apple Color Emoji", "Segoe UI Emoji";
    }
    header {
      position:sticky; top:0; z-index:5;
      background:linear-gradient(180deg, rgba(2,6,23,.9), rgba(2,6,23,.6));
      backdrop-filter: blur(8px);
      border-bottom:1px solid var(--border);
    }
    .wrap { max-width:1100px; margin:auto; padding: 16px; }
    h1 { margin: 0 0 6px; font-size: 28px; letter-spacing:.3px }
    .sub { color:var(--muted); font-size:14px }

    .toolbar {
      display:flex; gap:12px; flex-wrap:wrap; align-items:center; margin-top:12px
    }
    input, select, textarea, button {
      background:var(--input); color:var(--text);
      border:1px solid var(--border); border-radius:10px; padding:10px 12px;
      outline:none; transition:.15s ease border-color, .15s ease transform;
    }
    input:focus, textarea:focus, select:focus { border-color:#60a5fa }
    button { cursor:pointer; border:none; background:var(--card); }
    .btn-primary { background:var(--accent); color:#052e12; font-weight:700 }
    .btn-danger { background:var(--danger); color:#210808 }
    .btn-ghost { background:transparent; border:1px solid var(--border); }

    .grid {
      display:grid; gap:16px; grid-template-columns: 1.2fr 2fr;
    }
    @media (max-width: 900px) { .grid { grid-template-columns: 1fr } }

    .card { background:var(--card); border:1px solid var(--border); border-radius:16px; padding:16px }
    .card h2 { margin:0 0 10px; font-size:18px }

    .task-list { display:grid; gap:12px }
    .task { display:grid; grid-template-columns: 1fr auto; align-items:center; gap:12px; padding:14px; border-radius:14px; border:1px solid var(--border); background:#162033 }
    .task.overdue { border-color: var(--danger); box-shadow: 0 0 0 2px rgba(239,68,68,.2) inset }
    .task.running { border-color:#60a5fa; box-shadow: 0 0 0 2px rgba(96,165,250,.18) inset }
    .task.completed { opacity:.7; filter:saturate(.6) }

    .title { font-weight:700; font-size:16px }
    .meta { color:var(--muted); font-size:13px; margin-top:4px }
    .row { display:flex; gap:8px; flex-wrap:wrap; align-items:center }

    .pill { font-size:12px; padding:4px 8px; background:#0b1220; border:1px solid var(--border); border-radius:999px }

    .controls button { padding:8px 10px; border-radius:10px }

    .empty { color:var(--muted); text-align:center; padding:28px; border:1px dashed var(--border); border-radius:14px; background: #0b1220 }

    footer { text-align:center; color:var(--muted); padding:24px }
    a { color:#93c5fd }
  </style>
</head>
<body>
  <header>
    <div class="wrap">
      <h1>üóìÔ∏è Day Planner</h1>
      <div class="sub">Plan your day, set time limits, and track each task with live countdowns. Data saves automatically on this device.</div>

      <div class="toolbar">
        <label>
          <span style="font-size:12px;color:var(--muted);display:block;margin-bottom:6px">Date</span>
          <input type="date" id="datePicker" />
        </label>
        <div style="flex:1"></div>
        <button class="btn-ghost" id="exportBtn" title="Download a backup JSON of your schedule">Export</button>
        <label class="btn-ghost" for="importFile" style="display:inline-flex;align-items:center;gap:8px;cursor:pointer">Import<input id="importFile" type="file" accept="application/json" style="display:none"></label>
        <button class="btn-ghost" id="clearCompleted">Clear Completed</button>
        <button class="btn-danger" id="clearAll" title="Remove all tasks for the selected date">Clear All</button>
      </div>
    </div>
  </header>

  <main class="wrap" style="margin-top:16px">
    <div class="grid">
      <!-- Add Task -->
      <section class="card">
        <h2>Add Task</h2>
        <form id="taskForm" class="task-form">
          <div class="row">
            <input id="title" placeholder="Task title (e.g., Study DSA)" required />
          </div>
          <div class="row">
            <input id="minutes" type="number" min="1" step="1" placeholder="Time limit (minutes)" required style="max-width:220px" />
            <input id="startAt" type="time" placeholder="Start time (optional)" />
          </div>
          <div class="row">
            <textarea id="notes" placeholder="Notes (optional)" rows="2" style="width:100%"></textarea>
          </div>
          <div class="row">
            <button class="btn-primary" type="submit">Add to Schedule</button>
            <button class="btn-ghost" type="reset">Reset</button>
          </div>
        </form>
        <p class="sub" style="margin-top:10px">Tip: You can set a planned start time. Timer begins when you press <b>Start</b>. You can Pause/Resume anytime.</p>
      </section>

      <!-- Tasks -->
      <section class="card">
        <h2>Today's Schedule</h2>
        <div id="taskList" class="task-list"></div>
        <div id="empty" class="empty" style="display:none">No tasks yet for this date. Add one on the left!</div>
      </section>
    </div>
  </main>

  <footer>
    Built for GitHub Pages ¬∑ Works offline ¬∑ No backend ¬∑ <a href="#" id="helpLink">Help</a>
  </footer>

  <script>
    // ------- Storage Helpers -------
    const STORAGE_KEY = 'dayplanner_v1';
    function loadAll(){
      try { return JSON.parse(localStorage.getItem(STORAGE_KEY)) || {} } catch { return {} }
    }
    function saveAll(data){ localStorage.setItem(STORAGE_KEY, JSON.stringify(data)) }

    // Data structure: { 'YYYY-MM-DD': [ Task, Task ] }
    // Task: { id, title, minutes, notes, plannedStart, state, startedAt, endsAt, completedAt }

    const $ = sel => document.querySelector(sel);
    const listEl = $('#taskList');
    const emptyEl = $('#empty');
    const datePicker = $('#datePicker');

    // Init date to today in local TZ
    function todayStr(){
      const d = new Date();
      const tzOff = d.getTimezoneOffset();
      const local = new Date(d.getTime() - tzOff*60000);
      return local.toISOString().slice(0,10);
    }
    datePicker.value = todayStr();

    // Request notification permission lazily
    let notifAsked = false;
    function maybeAskNotif(){
      if (notifAsked) return; notifAsked = true;
      if ('Notification' in window && Notification.permission === 'default') {
        Notification.requestPermission();
      }
    }

    // Timer rendering
    let tickHandle = null;
    function startTicker(){ if (tickHandle) return; tickHandle = setInterval(render, 1000) }
    function stopTicker(){ clearInterval(tickHandle); tickHandle = null }

    // Core load/save
    function getTasksFor(date){ const all = loadAll(); return all[date] || [] }
    function setTasksFor(date, tasks){ const all = loadAll(); all[date] = tasks; saveAll(all) }

    function uid(){ return Math.random().toString(36).slice(2) + Date.now().toString(36) }

    // Add Task
    $('#taskForm').addEventListener('submit', (e)=>{
      e.preventDefault();
      const title = $('#title').value.trim();
      const minutes = parseInt($('#minutes').value, 10);
      const notes = $('#notes').value.trim();
      const plannedStart = $('#startAt').value || null;
      if(!title || !minutes || minutes < 1) return;

      const task = { id: uid(), title, minutes, notes, plannedStart, state: 'pending', startedAt: null, endsAt: null, completedAt: null };
      const date = datePicker.value;
      const tasks = getTasksFor(date);
      tasks.push(task);
      setTasksFor(date, tasks);
      e.target.reset();
      render();
    });

    // Render tasks
    function fmt(ms){
      const s = Math.max(0, Math.floor(ms/1000));
      const hh = Math.floor(s/3600).toString().padStart(2,'0');
      const mm = Math.floor((s%3600)/60).toString().padStart(2,'0');
      const ss = (s%60).toString().padStart(2,'0');
      return `${hh}:${mm}:${ss}`;
    }

    function sortTasks(a,b){
      const order = { running:0, pending:1, paused:2, overdue:3, completed:4 };
      const ao = order[a.state] ?? 9, bo = order[b.state] ?? 9;
      if (ao !== bo) return ao - bo;
      // then by planned start (if any), else by creation order
      if (a.plannedStart && b.plannedStart) return a.plannedStart.localeCompare(b.plannedStart);
      if (a.plannedStart && !b.plannedStart) return -1;
      if (!a.plannedStart && b.plannedStart) return 1;
      return 0;
    }

    function ensureState(task){
      if (task.state === 'running' && task.endsAt){
        const remaining = task.endsAt - Date.now();
        if (remaining <= 0){ task.state = 'overdue'; task.endsAt = null; notify(`${task.title} ‚Äî time is up!`); }
      }
      return task;
    }

    function notify(msg){
      try {
        if ('Notification' in window && Notification.permission === 'granted') new Notification('Day Planner', { body: msg });
        else alert(msg);
      } catch {}
    }

    function render(){
      const date = datePicker.value;
      let tasks = getTasksFor(date).map(t=>ensureState(t));
      setTasksFor(date, tasks); // persist state transitions

      tasks.sort(sortTasks);
      listEl.innerHTML = '';

      if (!tasks.length){ emptyEl.style.display = 'block'; stopTicker(); return }
      emptyEl.style.display = 'none'; startTicker();

      tasks.forEach(task => {
        const row = document.createElement('div');
        row.className = `task ${task.state}`;

        // LEFT: content
        const left = document.createElement('div');
        const title = document.createElement('div');
        title.className = 'title';
        title.textContent = task.title;
        const meta = document.createElement('div');
        meta.className = 'meta';
        const pieces = [];
        if (task.plannedStart) pieces.push(`Start: ${task.plannedStart}`);
        pieces.push(`Limit: ${task.minutes} min`);
        if (task.state === 'running' && task.endsAt){
          const remaining = task.endsAt - Date.now();
          pieces.push(`‚è≥ ${fmt(remaining)}`);
        }
        if (task.state === 'paused') pieces.push('‚è∏ paused');
        if (task.state === 'completed') pieces.push('‚úÖ completed');
        if (task.state === 'overdue') pieces.push('‚è∞ time over');
        meta.textContent = pieces.join(' ‚Ä¢ ');

        left.appendChild(title);
        left.appendChild(meta);
        if (task.notes){
          const notes = document.createElement('div');
          notes.className = 'meta'; notes.style.marginTop='6px';
          notes.textContent = task.notes; left.appendChild(notes);
        }

        // RIGHT: controls
        const controls = document.createElement('div');
        controls.className = 'controls row';

        function saveUpdate(){
          const date = datePicker.value;
          const tasks = getTasksFor(date).map(t => t.id===task.id ? task : t);
          setTasksFor(date, tasks);
          render();
        }

        const startBtn = document.createElement('button');
        startBtn.textContent = 'Start';
        startBtn.onclick = ()=>{
          maybeAskNotif();
          task.state = 'running';
          const now = Date.now();
          // If resuming from paused with remaining time
          if (!task.endsAt) task.endsAt = now + task.minutes*60000; // fresh start counts full limit
          else {
            // If endsAt existed (rare). Keep it.
          }
          saveUpdate();
        }

        const pauseBtn = document.createElement('button');
        pauseBtn.textContent = 'Pause';
        pauseBtn.onclick = ()=>{
          if (task.state !== 'running') return;
          const remaining = Math.max(0, task.endsAt - Date.now());
          task.minutes = Math.ceil(remaining/60000); // store remaining as whole minutes
          task.state = 'paused';
          task.endsAt = null;
          saveUpdate();
        }

        const resumeBtn = document.createElement('button');
        resumeBtn.textContent = 'Resume';
        resumeBtn.onclick = ()=>{
          maybeAskNotif();
          if (task.state !== 'paused') return;
          task.state = 'running';
          task.endsAt = Date.now() + task.minutes*60000;
          saveUpdate();
        }

        const completeBtn = document.createElement('button');
        completeBtn.textContent = 'Complete';
        completeBtn.onclick = ()=>{ task.state='completed'; task.completedAt = Date.now(); task.endsAt=null; saveUpdate() }

        const editBtn = document.createElement('button');
        editBtn.textContent = 'Edit';
        editBtn.onclick = ()=>{
          const newTitle = prompt('Edit title:', task.title) ?? task.title;
          const newMinStr = prompt('Edit time limit (minutes):', task.minutes);
          const newMin = parseInt(newMinStr,10);
          const newStart = prompt('Edit planned start (HH:MM, optional):', task.plannedStart || '') || null;
          const newNotes = prompt('Edit notes (optional):', task.notes || '') || '';
          if (newTitle.trim() && newMin>0){
            task.title=newTitle.trim(); task.minutes=newMin; task.plannedStart=newStart; task.notes=newNotes; task.endsAt=null; task.state='pending';
            saveUpdate();
          }
        }

        const delBtn = document.createElement('button');
        delBtn.textContent = 'Delete';
        delBtn.className = 'btn-danger';
        delBtn.onclick = ()=>{
          if (!confirm('Delete this task?')) return;
          const date = datePicker.value;
          const tasks = getTasksFor(date).filter(t => t.id!==task.id);
          setTasksFor(date, tasks); render();
        }

        // Show buttons conditionally
        if (task.state==='pending') controls.append(startBtn);
        if (task.state==='running') controls.append(pauseBtn, completeBtn);
        if (task.state==='paused') controls.append(resumeBtn, completeBtn);
        if (task.state==='overdue') controls.append(completeBtn);
        controls.append(editBtn, delBtn);

        row.append(left, controls);
        listEl.appendChild(row);
      });
    }

    // Date change
    datePicker.addEventListener('change', render);

    // Export / Import / Clear
    $('#exportBtn').addEventListener('click', ()=>{
      const data = loadAll();
      const blob = new Blob([JSON.stringify(data,null,2)], { type:'application/json' });
      const a = document.createElement('a');
      a.href = URL.createObjectURL(blob);
      a.download = 'dayplanner-backup.json';
      a.click(); URL.revokeObjectURL(a.href);
    });

    $('#importFile').addEventListener('change', (e)=>{
      const file = e.target.files?.[0]; if (!file) return;
      const reader = new FileReader();
      reader.onload = () => {
        try {
          const json = JSON.parse(reader.result);
          if (typeof json === 'object' && json) { saveAll(json); render(); alert('Import successful!') }
          else alert('Invalid file.');
        } catch { alert('Invalid JSON file.') }
      };
      reader.readAsText(file);
      e.target.value = '';
    });

    $('#clearCompleted').addEventListener('click', ()=>{
      const date = datePicker.value;
      const tasks = getTasksFor(date).filter(t => t.state!=='completed');
      setTasksFor(date, tasks); render();
    });

    $('#clearAll').addEventListener('click', ()=>{
      const date = datePicker.value;
      if (!confirm(`Clear all tasks for ${date}?`)) return;
      setTasksFor(date, []); render();
    });

    // Help link
    $('#helpLink').addEventListener('click', (e)=>{
      e.preventDefault();
      alert(`How to use:\n\n1) Pick a date at the top.\n2) Add tasks with a time limit (minutes).\n3) Press Start to begin a countdown.\n4) Pause/Resume/Complete as needed.\n5) Data auto-saves to this browser. Use Export to back up.`);
    });

    // First render
    render();
  </script>
</body>
</html>
